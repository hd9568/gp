digraph "CFG for '_ZL8AreaFacedddddddddddd' function" {
	label="CFG for '_ZL8AreaFacedddddddddddd' function";

	Node0x561418b558f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %x0.addr = alloca double, align 8\l  %x1.addr = alloca double, align 8\l  %x2.addr = alloca double, align 8\l  %x3.addr = alloca double, align 8\l  %y0.addr = alloca double, align 8\l  %y1.addr = alloca double, align 8\l  %y2.addr = alloca double, align 8\l  %y3.addr = alloca double, align 8\l  %z0.addr = alloca double, align 8\l  %z1.addr = alloca double, align 8\l  %z2.addr = alloca double, align 8\l  %z3.addr = alloca double, align 8\l  %fx = alloca double, align 8\l  %fy = alloca double, align 8\l  %fz = alloca double, align 8\l  %gx = alloca double, align 8\l  %gy = alloca double, align 8\l  %gz = alloca double, align 8\l  %area = alloca double, align 8\l  store double %x0, ptr %x0.addr, align 8\l  store double %x1, ptr %x1.addr, align 8\l  store double %x2, ptr %x2.addr, align 8\l  store double %x3, ptr %x3.addr, align 8\l  store double %y0, ptr %y0.addr, align 8\l  store double %y1, ptr %y1.addr, align 8\l  store double %y2, ptr %y2.addr, align 8\l  store double %y3, ptr %y3.addr, align 8\l  store double %z0, ptr %z0.addr, align 8\l  store double %z1, ptr %z1.addr, align 8\l  store double %z2, ptr %z2.addr, align 8\l  store double %z3, ptr %z3.addr, align 8\l  %0 = load double, ptr %x2.addr, align 8\l  %1 = load double, ptr %x0.addr, align 8\l  %sub = fsub double %0, %1\l  %2 = load double, ptr %x3.addr, align 8\l  %3 = load double, ptr %x1.addr, align 8\l  %sub1 = fsub double %2, %3\l  %sub2 = fsub double %sub, %sub1\l  store double %sub2, ptr %fx, align 8\l  %4 = load double, ptr %y2.addr, align 8\l  %5 = load double, ptr %y0.addr, align 8\l  %sub3 = fsub double %4, %5\l  %6 = load double, ptr %y3.addr, align 8\l  %7 = load double, ptr %y1.addr, align 8\l  %sub4 = fsub double %6, %7\l  %sub5 = fsub double %sub3, %sub4\l  store double %sub5, ptr %fy, align 8\l  %8 = load double, ptr %z2.addr, align 8\l  %9 = load double, ptr %z0.addr, align 8\l  %sub6 = fsub double %8, %9\l  %10 = load double, ptr %z3.addr, align 8\l  %11 = load double, ptr %z1.addr, align 8\l  %sub7 = fsub double %10, %11\l  %sub8 = fsub double %sub6, %sub7\l  store double %sub8, ptr %fz, align 8\l  %12 = load double, ptr %x2.addr, align 8\l  %13 = load double, ptr %x0.addr, align 8\l  %sub9 = fsub double %12, %13\l  %14 = load double, ptr %x3.addr, align 8\l  %15 = load double, ptr %x1.addr, align 8\l  %sub10 = fsub double %14, %15\l  %add = fadd double %sub9, %sub10\l  store double %add, ptr %gx, align 8\l  %16 = load double, ptr %y2.addr, align 8\l  %17 = load double, ptr %y0.addr, align 8\l  %sub11 = fsub double %16, %17\l  %18 = load double, ptr %y3.addr, align 8\l  %19 = load double, ptr %y1.addr, align 8\l  %sub12 = fsub double %18, %19\l  %add13 = fadd double %sub11, %sub12\l  store double %add13, ptr %gy, align 8\l  %20 = load double, ptr %z2.addr, align 8\l  %21 = load double, ptr %z0.addr, align 8\l  %sub14 = fsub double %20, %21\l  %22 = load double, ptr %z3.addr, align 8\l  %23 = load double, ptr %z1.addr, align 8\l  %sub15 = fsub double %22, %23\l  %add16 = fadd double %sub14, %sub15\l  store double %add16, ptr %gz, align 8\l  %24 = load double, ptr %fx, align 8\l  %25 = load double, ptr %fx, align 8\l  %26 = load double, ptr %fy, align 8\l  %27 = load double, ptr %fy, align 8\l  %mul17 = fmul double %26, %27\l  %28 = call double @llvm.fmuladd.f64(double %24, double %25, double %mul17)\l  %29 = load double, ptr %fz, align 8\l  %30 = load double, ptr %fz, align 8\l  %31 = call double @llvm.fmuladd.f64(double %29, double %30, double %28)\l  %32 = load double, ptr %gx, align 8\l  %33 = load double, ptr %gx, align 8\l  %34 = load double, ptr %gy, align 8\l  %35 = load double, ptr %gy, align 8\l  %mul18 = fmul double %34, %35\l  %36 = call double @llvm.fmuladd.f64(double %32, double %33, double %mul18)\l  %37 = load double, ptr %gz, align 8\l  %38 = load double, ptr %gz, align 8\l  %39 = call double @llvm.fmuladd.f64(double %37, double %38, double %36)\l  %40 = load double, ptr %fx, align 8\l  %41 = load double, ptr %gx, align 8\l  %42 = load double, ptr %fy, align 8\l  %43 = load double, ptr %gy, align 8\l  %mul20 = fmul double %42, %43\l  %44 = call double @llvm.fmuladd.f64(double %40, double %41, double %mul20)\l  %45 = load double, ptr %fz, align 8\l  %46 = load double, ptr %gz, align 8\l  %47 = call double @llvm.fmuladd.f64(double %45, double %46, double %44)\l  %48 = load double, ptr %fx, align 8\l  %49 = load double, ptr %gx, align 8\l  %50 = load double, ptr %fy, align 8\l  %51 = load double, ptr %gy, align 8\l  %mul23 = fmul double %50, %51\l  %52 = call double @llvm.fmuladd.f64(double %48, double %49, double %mul23)\l  %53 = load double, ptr %fz, align 8\l  %54 = load double, ptr %gz, align 8\l  %55 = call double @llvm.fmuladd.f64(double %53, double %54, double %52)\l  %mul25 = fmul double %47, %55\l  %neg = fneg double %mul25\l  %56 = call double @llvm.fmuladd.f64(double %31, double %39, double %neg)\l  store double %56, ptr %area, align 8\l  %57 = load double, ptr %area, align 8\l  ret double %57\l}"];
}
