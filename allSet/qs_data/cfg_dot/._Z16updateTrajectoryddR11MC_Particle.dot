digraph "CFG for '_Z16updateTrajectoryddR11MC_Particle' function" {
	label="CFG for '_Z16updateTrajectoryddR11MC_Particle' function";

	Node0x5642d2159220 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %energy.addr = alloca double, align 8\l  %angle.addr = alloca double, align 8\l  %particle.addr = alloca ptr, align 8\l  %cosTheta = alloca double, align 8\l  %randomNumber = alloca double, align 8\l  %phi = alloca double, align 8\l  %sinPhi = alloca double, align 8\l  %cosPhi = alloca double, align 8\l  %sinTheta = alloca double, align 8\l  %speed = alloca double, align 8\l  store double %energy, ptr %energy.addr, align 8\l  store double %angle, ptr %angle.addr, align 8\l  store ptr %particle, ptr %particle.addr, align 8\l  %0 = load double, ptr %energy.addr, align 8\l  %1 = load ptr, ptr %particle.addr, align 8\l  %kinetic_energy = getelementptr inbounds %class.MC_Particle, ptr %1, i32 0,\l... i32 3\l  store double %0, ptr %kinetic_energy, align 8\l  %2 = load double, ptr %angle.addr, align 8\l  store double %2, ptr %cosTheta, align 8\l  %3 = load ptr, ptr %particle.addr, align 8\l  %random_number_seed = getelementptr inbounds %class.MC_Particle, ptr %3, i32\l... 0, i32 11\l  %call = call noundef double @_Z9rngSamplePm(ptr noundef %random_number_seed)\l  store double %call, ptr %randomNumber, align 8\l  %4 = load double, ptr %randomNumber, align 8\l  %mul = fmul double 0x401921FB53C8D4F1, %4\l  store double %mul, ptr %phi, align 8\l  %5 = load double, ptr %phi, align 8\l  %call1 = call double @sin(double noundef %5) #3\l  store double %call1, ptr %sinPhi, align 8\l  %6 = load double, ptr %phi, align 8\l  %call2 = call double @cos(double noundef %6) #3\l  store double %call2, ptr %cosPhi, align 8\l  %7 = load double, ptr %cosTheta, align 8\l  %8 = load double, ptr %cosTheta, align 8\l  %neg = fneg double %7\l  %9 = call double @llvm.fmuladd.f64(double %neg, double %8, double\l... 1.000000e+00)\l  %call4 = call double @sqrt(double noundef %9) #3\l  store double %call4, ptr %sinTheta, align 8\l  %10 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine = getelementptr inbounds %class.MC_Particle, ptr %10, i32\l... 0, i32 2\l  %11 = load double, ptr %sinTheta, align 8\l  %12 = load double, ptr %cosTheta, align 8\l  %13 = load double, ptr %sinPhi, align 8\l  %14 = load double, ptr %cosPhi, align 8\l  call void @_ZN15DirectionCosine14Rotate3DVectorEdddd(ptr noundef nonnull\l... align 8 dereferenceable(24) %direction_cosine, double noundef %11, double\l... noundef %12, double noundef %13, double noundef %14)\l  %15 = load double, ptr %energy.addr, align 8\l  %add = fadd double %15, 0x408D5C868CBAFDB1\l  %16 = load double, ptr %energy.addr, align 8\l  %add5 = fadd double %16, 0x408D5C868CBAFDB1\l  %mul6 = fmul double %add, %add5\l  %div = fdiv double 0x412AF0BF66F1DC0C, %mul6\l  %sub = fsub double 1.000000e+00, %div\l  %call7 = call double @sqrt(double noundef %sub) #3\l  %mul8 = fmul double 0x421BEB9BF3A00000, %call7\l  store double %mul8, ptr %speed, align 8\l  %17 = load double, ptr %speed, align 8\l  %18 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine9 = getelementptr inbounds %class.MC_Particle, ptr %18, i32\l... 0, i32 2\l  %alpha = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine9, i32 0, i32 0\l  %19 = load double, ptr %alpha, align 8\l  %mul10 = fmul double %17, %19\l  %20 = load ptr, ptr %particle.addr, align 8\l  %velocity = getelementptr inbounds %class.MC_Particle, ptr %20, i32 0, i32 1\l  %x = getelementptr inbounds %class.MC_Vector, ptr %velocity, i32 0, i32 0\l  store double %mul10, ptr %x, align 8\l  %21 = load double, ptr %speed, align 8\l  %22 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine11 = getelementptr inbounds %class.MC_Particle, ptr %22,\l... i32 0, i32 2\l  %beta = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine11, i32 0, i32 1\l  %23 = load double, ptr %beta, align 8\l  %mul12 = fmul double %21, %23\l  %24 = load ptr, ptr %particle.addr, align 8\l  %velocity13 = getelementptr inbounds %class.MC_Particle, ptr %24, i32 0, i32\l... 1\l  %y = getelementptr inbounds %class.MC_Vector, ptr %velocity13, i32 0, i32 1\l  store double %mul12, ptr %y, align 8\l  %25 = load double, ptr %speed, align 8\l  %26 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine14 = getelementptr inbounds %class.MC_Particle, ptr %26,\l... i32 0, i32 2\l  %gamma = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine14, i32 0, i32 2\l  %27 = load double, ptr %gamma, align 8\l  %mul15 = fmul double %25, %27\l  %28 = load ptr, ptr %particle.addr, align 8\l  %velocity16 = getelementptr inbounds %class.MC_Particle, ptr %28, i32 0, i32\l... 1\l  %z = getelementptr inbounds %class.MC_Vector, ptr %velocity16, i32 0, i32 2\l  store double %mul15, ptr %z, align 8\l  %29 = load ptr, ptr %particle.addr, align 8\l  %random_number_seed17 = getelementptr inbounds %class.MC_Particle, ptr %29,\l... i32 0, i32 11\l  %call18 = call noundef double @_Z9rngSamplePm(ptr noundef\l... %random_number_seed17)\l  store double %call18, ptr %randomNumber, align 8\l  %30 = load double, ptr %randomNumber, align 8\l  %call19 = call double @log(double noundef %30) #3\l  %mul20 = fmul double -1.000000e+00, %call19\l  %31 = load ptr, ptr %particle.addr, align 8\l  %num_mean_free_paths = getelementptr inbounds %class.MC_Particle, ptr %31,\l... i32 0, i32 8\l  store double %mul20, ptr %num_mean_free_paths, align 8\l  ret void\l}"];
}
