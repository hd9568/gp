digraph "CFG for '_ZN15DirectionCosine14Rotate3DVectorEdddd' function" {
	label="CFG for '_ZN15DirectionCosine14Rotate3DVectorEdddd' function";

	Node0x5642d21613b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %this.addr = alloca ptr, align 8\l  %sin_Theta.addr = alloca double, align 8\l  %cos_Theta.addr = alloca double, align 8\l  %sin_Phi.addr = alloca double, align 8\l  %cos_Phi.addr = alloca double, align 8\l  %cos_theta = alloca double, align 8\l  %sin_theta = alloca double, align 8\l  %cos_phi = alloca double, align 8\l  %sin_phi = alloca double, align 8\l  store ptr %this, ptr %this.addr, align 8\l  store double %sin_Theta, ptr %sin_Theta.addr, align 8\l  store double %cos_Theta, ptr %cos_Theta.addr, align 8\l  store double %sin_Phi, ptr %sin_Phi.addr, align 8\l  store double %cos_Phi, ptr %cos_Phi.addr, align 8\l  %this1 = load ptr, ptr %this.addr, align 8\l  %gamma = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 2\l  %0 = load double, ptr %gamma, align 8\l  store double %0, ptr %cos_theta, align 8\l  %1 = load double, ptr %cos_theta, align 8\l  %2 = load double, ptr %cos_theta, align 8\l  %neg = fneg double %1\l  %3 = call double @llvm.fmuladd.f64(double %neg, double %2, double\l... 1.000000e+00)\l  %call = call double @sqrt(double noundef %3) #3\l  store double %call, ptr %sin_theta, align 8\l  %4 = load double, ptr %sin_theta, align 8\l  %cmp = fcmp olt double %4, 0x3EB0C6F7A0B5ED8D\l  br i1 %cmp, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5642d21613b0:s0 -> Node0x5642d2162850[tooltip="entry -> if.then\nProbability 50.00%" ];
	Node0x5642d21613b0:s1 -> Node0x5642d215dd20[tooltip="entry -> if.else\nProbability 50.00%" ];
	Node0x5642d2162850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{if.then:\l|  store double 1.000000e+00, ptr %cos_phi, align 8\l  store double 0.000000e+00, ptr %sin_phi, align 8\l  br label %if.end\l}"];
	Node0x5642d2162850 -> Node0x5642d215def0[tooltip="if.then -> if.end\nProbability 100.00%" ];
	Node0x5642d215dd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{if.else:\l|  %alpha = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 0\l  %5 = load double, ptr %alpha, align 8\l  %6 = load double, ptr %sin_theta, align 8\l  %div = fdiv double %5, %6\l  store double %div, ptr %cos_phi, align 8\l  %beta = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 1\l  %7 = load double, ptr %beta, align 8\l  %8 = load double, ptr %sin_theta, align 8\l  %div2 = fdiv double %7, %8\l  store double %div2, ptr %sin_phi, align 8\l  br label %if.end\l}"];
	Node0x5642d215dd20 -> Node0x5642d215def0[tooltip="if.else -> if.end\nProbability 100.00%" ];
	Node0x5642d215def0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{if.end:\l|  %9 = load double, ptr %cos_theta, align 8\l  %10 = load double, ptr %cos_phi, align 8\l  %mul = fmul double %9, %10\l  %11 = load double, ptr %sin_Theta.addr, align 8\l  %12 = load double, ptr %cos_Phi.addr, align 8\l  %mul3 = fmul double %11, %12\l  %13 = load double, ptr %sin_phi, align 8\l  %14 = load double, ptr %sin_Theta.addr, align 8\l  %15 = load double, ptr %sin_Phi.addr, align 8\l  %mul5 = fmul double %14, %15\l  %mul6 = fmul double %13, %mul5\l  %neg7 = fneg double %mul6\l  %16 = call double @llvm.fmuladd.f64(double %mul, double %mul3, double %neg7)\l  %17 = load double, ptr %sin_theta, align 8\l  %18 = load double, ptr %cos_phi, align 8\l  %mul8 = fmul double %17, %18\l  %19 = load double, ptr %cos_Theta.addr, align 8\l  %20 = call double @llvm.fmuladd.f64(double %mul8, double %19, double %16)\l  %alpha10 = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 0\l  store double %20, ptr %alpha10, align 8\l  %21 = load double, ptr %cos_theta, align 8\l  %22 = load double, ptr %sin_phi, align 8\l  %mul11 = fmul double %21, %22\l  %23 = load double, ptr %sin_Theta.addr, align 8\l  %24 = load double, ptr %cos_Phi.addr, align 8\l  %mul12 = fmul double %23, %24\l  %25 = load double, ptr %cos_phi, align 8\l  %26 = load double, ptr %sin_Theta.addr, align 8\l  %27 = load double, ptr %sin_Phi.addr, align 8\l  %mul14 = fmul double %26, %27\l  %mul15 = fmul double %25, %mul14\l  %28 = call double @llvm.fmuladd.f64(double %mul11, double %mul12, double\l... %mul15)\l  %29 = load double, ptr %sin_theta, align 8\l  %30 = load double, ptr %sin_phi, align 8\l  %mul16 = fmul double %29, %30\l  %31 = load double, ptr %cos_Theta.addr, align 8\l  %32 = call double @llvm.fmuladd.f64(double %mul16, double %31, double %28)\l  %beta18 = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 1\l  store double %32, ptr %beta18, align 8\l  %33 = load double, ptr %sin_theta, align 8\l  %fneg = fneg double %33\l  %34 = load double, ptr %sin_Theta.addr, align 8\l  %35 = load double, ptr %cos_Phi.addr, align 8\l  %mul19 = fmul double %34, %35\l  %36 = load double, ptr %cos_theta, align 8\l  %37 = load double, ptr %cos_Theta.addr, align 8\l  %mul21 = fmul double %36, %37\l  %38 = call double @llvm.fmuladd.f64(double %fneg, double %mul19, double\l... %mul21)\l  %gamma22 = getelementptr inbounds %class.DirectionCosine, ptr %this1, i32 0,\l... i32 2\l  store double %38, ptr %gamma22, align 8\l  ret void\l}"];
}
