digraph "CFG for '_Z20MCT_Reflect_ParticleP10MonteCarloR11MC_Particle' function" {
	label="CFG for '_Z20MCT_Reflect_ParticleP10MonteCarloR11MC_Particle' function";

	Node0x5579e71acad0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %monteCarlo.addr = alloca ptr, align 8\l  %particle.addr = alloca ptr, align 8\l  %direction_cosine = alloca ptr, align 8\l  %location = alloca %class.MC_Location, align 4\l  %tmp.coerce = alloca \{ i64, i32 \}, align 8\l  %domain = alloca ptr, align 8\l  %plane = alloca ptr, align 8\l  %facet_normal = alloca %class.MC_Vector, align 8\l  %dot = alloca double, align 8\l  %particle_speed = alloca double, align 8\l  store ptr %monteCarlo, ptr %monteCarlo.addr, align 8\l  store ptr %particle, ptr %particle.addr, align 8\l  %0 = load ptr, ptr %particle.addr, align 8\l  %call = call noundef ptr @_ZN11MC_Particle20Get_Direction_CosineEv(ptr\l... noundef nonnull align 8 dereferenceable(208) %0)\l  store ptr %call, ptr %direction_cosine, align 8\l  %1 = load ptr, ptr %particle.addr, align 8\l  %call1 = call \{ i64, i32 \} @_ZNK11MC_Particle12Get_LocationEv(ptr noundef\l... nonnull align 8 dereferenceable(208) %1)\l  store \{ i64, i32 \} %call1, ptr %tmp.coerce, align 8\l  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %location, ptr align 8\l... %tmp.coerce, i64 12, i1 false)\l  %2 = load ptr, ptr %monteCarlo.addr, align 8\l  %call2 = call noundef nonnull align 8 dereferenceable(288) ptr\l... @_ZNK11MC_Location10get_domainEP10MonteCarlo(ptr noundef nonnull align 4\l... dereferenceable(12) %location, ptr noundef %2)\l  store ptr %call2, ptr %domain, align 8\l  %3 = load ptr, ptr %domain, align 8\l  %mesh = getelementptr inbounds %class.MC_Domain, ptr %3, i32 0, i32 4\l  %_cellGeometry = getelementptr inbounds %class.MC_Mesh_Domain, ptr %mesh,\l... i32 0, i32 5\l  %cell = getelementptr inbounds %class.MC_Location, ptr %location, i32 0, i32\l... 1\l  %4 = load i32, ptr %cell, align 4\l  %call3 = call noundef nonnull align 8 dereferenceable(16) ptr\l... @_ZNK9qs_vectorI22MC_Facet_Geometry_CellEixEi(ptr noundef nonnull align 8\l... dereferenceable(24) %_cellGeometry, i32 noundef %4)\l  %_facet = getelementptr inbounds %class.MC_Facet_Geometry_Cell, ptr %call3,\l... i32 0, i32 0\l  %5 = load ptr, ptr %_facet, align 8\l  %facet = getelementptr inbounds %class.MC_Location, ptr %location, i32 0,\l... i32 2\l  %6 = load i32, ptr %facet, align 4\l  %idxprom = sext i32 %6 to i64\l  %arrayidx = getelementptr inbounds %class.MC_General_Plane, ptr %5, i64\l... %idxprom\l  store ptr %arrayidx, ptr %plane, align 8\l  %7 = load ptr, ptr %plane, align 8\l  %A = getelementptr inbounds %class.MC_General_Plane, ptr %7, i32 0, i32 0\l  %8 = load double, ptr %A, align 8\l  %9 = load ptr, ptr %plane, align 8\l  %B = getelementptr inbounds %class.MC_General_Plane, ptr %9, i32 0, i32 1\l  %10 = load double, ptr %B, align 8\l  %11 = load ptr, ptr %plane, align 8\l  %C = getelementptr inbounds %class.MC_General_Plane, ptr %11, i32 0, i32 2\l  %12 = load double, ptr %C, align 8\l  call void @_ZN9MC_VectorC2Eddd(ptr noundef nonnull align 8\l... dereferenceable(24) %facet_normal, double noundef %8, double noundef %10,\l... double noundef %12)\l  %13 = load ptr, ptr %direction_cosine, align 8\l  %alpha = getelementptr inbounds %class.DirectionCosine, ptr %13, i32 0, i32 0\l  %14 = load double, ptr %alpha, align 8\l  %x = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0, i32 0\l  %15 = load double, ptr %x, align 8\l  %16 = load ptr, ptr %direction_cosine, align 8\l  %beta = getelementptr inbounds %class.DirectionCosine, ptr %16, i32 0, i32 1\l  %17 = load double, ptr %beta, align 8\l  %y = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0, i32 1\l  %18 = load double, ptr %y, align 8\l  %mul4 = fmul double %17, %18\l  %19 = call double @llvm.fmuladd.f64(double %14, double %15, double %mul4)\l  %20 = load ptr, ptr %direction_cosine, align 8\l  %gamma = getelementptr inbounds %class.DirectionCosine, ptr %20, i32 0, i32 2\l  %21 = load double, ptr %gamma, align 8\l  %z = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0, i32 2\l  %22 = load double, ptr %z, align 8\l  %23 = call double @llvm.fmuladd.f64(double %21, double %22, double %19)\l  %mul = fmul double 2.000000e+00, %23\l  store double %mul, ptr %dot, align 8\l  %24 = load double, ptr %dot, align 8\l  %cmp = fcmp ogt double %24, 0.000000e+00\l  br i1 %cmp, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5579e71acad0:s0 -> Node0x5579e718e6c0[tooltip="entry -> if.then\nProbability 50.00%" ];
	Node0x5579e71acad0:s1 -> Node0x5579e71b0230[tooltip="entry -> if.end\nProbability 50.00%" ];
	Node0x5579e718e6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{if.then:\l|  %25 = load double, ptr %dot, align 8\l  %x5 = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0, i32\l... 0\l  %26 = load double, ptr %x5, align 8\l  %27 = load ptr, ptr %direction_cosine, align 8\l  %alpha7 = getelementptr inbounds %class.DirectionCosine, ptr %27, i32 0, i32\l... 0\l  %28 = load double, ptr %alpha7, align 8\l  %neg = fneg double %25\l  %29 = call double @llvm.fmuladd.f64(double %neg, double %26, double %28)\l  store double %29, ptr %alpha7, align 8\l  %30 = load double, ptr %dot, align 8\l  %y8 = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0, i32\l... 1\l  %31 = load double, ptr %y8, align 8\l  %32 = load ptr, ptr %direction_cosine, align 8\l  %beta10 = getelementptr inbounds %class.DirectionCosine, ptr %32, i32 0, i32\l... 1\l  %33 = load double, ptr %beta10, align 8\l  %neg11 = fneg double %30\l  %34 = call double @llvm.fmuladd.f64(double %neg11, double %31, double %33)\l  store double %34, ptr %beta10, align 8\l  %35 = load double, ptr %dot, align 8\l  %z12 = getelementptr inbounds %class.MC_Vector, ptr %facet_normal, i32 0,\l... i32 2\l  %36 = load double, ptr %z12, align 8\l  %37 = load ptr, ptr %direction_cosine, align 8\l  %gamma14 = getelementptr inbounds %class.DirectionCosine, ptr %37, i32 0,\l... i32 2\l  %38 = load double, ptr %gamma14, align 8\l  %neg15 = fneg double %35\l  %39 = call double @llvm.fmuladd.f64(double %neg15, double %36, double %38)\l  store double %39, ptr %gamma14, align 8\l  br label %if.end\l}"];
	Node0x5579e718e6c0 -> Node0x5579e71b0230[tooltip="if.then -> if.end\nProbability 100.00%" ];
	Node0x5579e71b0230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{if.end:\l|  %40 = load ptr, ptr %particle.addr, align 8\l  %velocity = getelementptr inbounds %class.MC_Particle, ptr %40, i32 0, i32 1\l  %call16 = call noundef double @_ZNK9MC_Vector6LengthEv(ptr noundef nonnull\l... align 8 dereferenceable(24) %velocity)\l  store double %call16, ptr %particle_speed, align 8\l  %41 = load double, ptr %particle_speed, align 8\l  %42 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine17 = getelementptr inbounds %class.MC_Particle, ptr %42,\l... i32 0, i32 2\l  %alpha18 = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine17, i32 0, i32 0\l  %43 = load double, ptr %alpha18, align 8\l  %mul19 = fmul double %41, %43\l  %44 = load ptr, ptr %particle.addr, align 8\l  %velocity20 = getelementptr inbounds %class.MC_Particle, ptr %44, i32 0, i32\l... 1\l  %x21 = getelementptr inbounds %class.MC_Vector, ptr %velocity20, i32 0, i32 0\l  store double %mul19, ptr %x21, align 8\l  %45 = load double, ptr %particle_speed, align 8\l  %46 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine22 = getelementptr inbounds %class.MC_Particle, ptr %46,\l... i32 0, i32 2\l  %beta23 = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine22, i32 0, i32 1\l  %47 = load double, ptr %beta23, align 8\l  %mul24 = fmul double %45, %47\l  %48 = load ptr, ptr %particle.addr, align 8\l  %velocity25 = getelementptr inbounds %class.MC_Particle, ptr %48, i32 0, i32\l... 1\l  %y26 = getelementptr inbounds %class.MC_Vector, ptr %velocity25, i32 0, i32 1\l  store double %mul24, ptr %y26, align 8\l  %49 = load double, ptr %particle_speed, align 8\l  %50 = load ptr, ptr %particle.addr, align 8\l  %direction_cosine27 = getelementptr inbounds %class.MC_Particle, ptr %50,\l... i32 0, i32 2\l  %gamma28 = getelementptr inbounds %class.DirectionCosine, ptr\l... %direction_cosine27, i32 0, i32 2\l  %51 = load double, ptr %gamma28, align 8\l  %mul29 = fmul double %49, %51\l  %52 = load ptr, ptr %particle.addr, align 8\l  %velocity30 = getelementptr inbounds %class.MC_Particle, ptr %52, i32 0, i32\l... 1\l  %z31 = getelementptr inbounds %class.MC_Vector, ptr %velocity30, i32 0, i32 2\l  store double %mul29, ptr %z31, align 8\l  ret void\l}"];
}
