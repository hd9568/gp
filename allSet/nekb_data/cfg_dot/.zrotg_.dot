digraph "CFG for 'zrotg_' function" {
	label="CFG for 'zrotg_' function";

	Node0x55ee109ff5f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{4:\l|  %5 = alloca \{ double, double \}, i64 1, align 8\l  %6 = alloca double, i64 1, align 8\l  %7 = alloca double, i64 1, align 8\l  %8 = load \{ double, double \}, ptr %0, align 8\l  %9 = extractvalue \{ double, double \} %8, 0\l  %10 = extractvalue \{ double, double \} %8, 1\l  %11 = call double @cabs(double %9, double %10)\l  %12 = fcmp contract une double %11, 0.000000e+00\l  %13 = xor i1 %12, true\l  br i1 %13, label %14, label %16\l|{<s0>T|<s1>F}}"];
	Node0x55ee109ff5f0:s0 -> Node0x55ee109ffc90[tooltip="4 -> 14\nProbability 50.00%" ];
	Node0x55ee109ff5f0:s1 -> Node0x55ee109ffce0[tooltip="4 -> 16\nProbability 50.00%" ];
	Node0x55ee109ffc90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{14:\l|  store double 0.000000e+00, ptr %2, align 8\l  store \{ double, double \} \{ double 1.000000e+00, double 0.000000e+00 \}, ptr\l... %3, align 8\l  %15 = load \{ double, double \}, ptr %1, align 8\l  store \{ double, double \} %15, ptr %0, align 8\l  br label %125\l}"];
	Node0x55ee109ffc90 -> Node0x55ee10a00040[tooltip="14 -> 125\nProbability 100.00%" ];
	Node0x55ee109ffce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{16:\l|  %17 = load \{ double, double \}, ptr %0, align 8\l  %18 = extractvalue \{ double, double \} %17, 0\l  %19 = extractvalue \{ double, double \} %17, 1\l  %20 = call double @cabs(double %18, double %19)\l  %21 = load \{ double, double \}, ptr %1, align 8\l  %22 = extractvalue \{ double, double \} %21, 0\l  %23 = extractvalue \{ double, double \} %21, 1\l  %24 = call double @cabs(double %22, double %23)\l  %25 = fadd contract double %20, %24\l  store double %25, ptr %7, align 8\l  %26 = load double, ptr %7, align 8\l  %27 = load \{ double, double \}, ptr %0, align 8\l  %28 = insertvalue \{ double, double \} undef, double %26, 0\l  %29 = insertvalue \{ double, double \} %28, double 0.000000e+00, 1\l  %30 = extractvalue \{ double, double \} %27, 0\l  %31 = extractvalue \{ double, double \} %27, 1\l  %32 = extractvalue \{ double, double \} %29, 0\l  %33 = extractvalue \{ double, double \} %29, 1\l  %34 = call \{ double, double \} @__divdc3(double %30, double %31, double %32,\l... double %33)\l  %35 = call ptr @llvm.stacksave.p0()\l  %36 = alloca \{ double, double \}, i64 1, align 8\l  store \{ double, double \} %34, ptr %36, align 8\l  %37 = load \{ double, double \}, ptr %36, align 8\l  call void @llvm.stackrestore.p0(ptr %35)\l  %38 = extractvalue \{ double, double \} %37, 0\l  %39 = extractvalue \{ double, double \} %37, 1\l  %40 = call double @cabs(double %38, double %39)\l  %41 = call contract double @llvm.powi.f64.i32(double %40, i32 2)\l  %42 = load \{ double, double \}, ptr %1, align 8\l  %43 = load double, ptr %7, align 8\l  %44 = insertvalue \{ double, double \} undef, double %43, 0\l  %45 = insertvalue \{ double, double \} %44, double 0.000000e+00, 1\l  %46 = extractvalue \{ double, double \} %42, 0\l  %47 = extractvalue \{ double, double \} %42, 1\l  %48 = extractvalue \{ double, double \} %45, 0\l  %49 = extractvalue \{ double, double \} %45, 1\l  %50 = call \{ double, double \} @__divdc3(double %46, double %47, double %48,\l... double %49)\l  %51 = call ptr @llvm.stacksave.p0()\l  %52 = alloca \{ double, double \}, i64 1, align 8\l  store \{ double, double \} %50, ptr %52, align 8\l  %53 = load \{ double, double \}, ptr %52, align 8\l  call void @llvm.stackrestore.p0(ptr %51)\l  %54 = extractvalue \{ double, double \} %53, 0\l  %55 = extractvalue \{ double, double \} %53, 1\l  %56 = call double @cabs(double %54, double %55)\l  %57 = call contract double @llvm.powi.f64.i32(double %56, i32 2)\l  %58 = fadd contract double %41, %57\l  %59 = call contract double @llvm.sqrt.f64(double %58)\l  %60 = fmul contract double %26, %59\l  store double %60, ptr %6, align 8\l  %61 = load \{ double, double \}, ptr %0, align 8\l  %62 = extractvalue \{ double, double \} %61, 0\l  %63 = extractvalue \{ double, double \} %61, 1\l  %64 = call double @cabs(double %62, double %63)\l  %65 = insertvalue \{ double, double \} undef, double %64, 0\l  %66 = insertvalue \{ double, double \} %65, double 0.000000e+00, 1\l  %67 = extractvalue \{ double, double \} %61, 0\l  %68 = extractvalue \{ double, double \} %61, 1\l  %69 = extractvalue \{ double, double \} %66, 0\l  %70 = extractvalue \{ double, double \} %66, 1\l  %71 = call \{ double, double \} @__divdc3(double %67, double %68, double %69,\l... double %70)\l  %72 = call ptr @llvm.stacksave.p0()\l  %73 = alloca \{ double, double \}, i64 1, align 8\l  store \{ double, double \} %71, ptr %73, align 8\l  %74 = load \{ double, double \}, ptr %73, align 8\l  call void @llvm.stackrestore.p0(ptr %72)\l  store \{ double, double \} %74, ptr %5, align 8\l  %75 = load \{ double, double \}, ptr %0, align 8\l  %76 = extractvalue \{ double, double \} %75, 0\l  %77 = extractvalue \{ double, double \} %75, 1\l  %78 = call double @cabs(double %76, double %77)\l  %79 = load double, ptr %6, align 8\l  %80 = fdiv contract double %78, %79\l  store double %80, ptr %2, align 8\l  %81 = load \{ double, double \}, ptr %5, align 8\l  %82 = load \{ double, double \}, ptr %1, align 8\l  %83 = extractvalue \{ double, double \} %82, 1\l  %84 = fneg contract double %83\l  %85 = insertvalue \{ double, double \} %82, double %84, 1\l  %86 = extractvalue \{ double, double \} %81, 0\l  %87 = extractvalue \{ double, double \} %81, 1\l  %88 = extractvalue \{ double, double \} %85, 0\l  %89 = extractvalue \{ double, double \} %85, 1\l  %90 = fmul contract double %86, %88\l  %91 = fmul contract double %87, %88\l  %92 = fmul contract double %86, %89\l  %93 = fadd contract double %92, %91\l  %94 = fmul contract double %87, %89\l  %95 = fsub contract double %90, %94\l  %96 = insertvalue \{ double, double \} undef, double %95, 0\l  %97 = insertvalue \{ double, double \} %96, double %93, 1\l  %98 = load double, ptr %6, align 8\l  %99 = insertvalue \{ double, double \} undef, double %98, 0\l  %100 = insertvalue \{ double, double \} %99, double 0.000000e+00, 1\l  %101 = extractvalue \{ double, double \} %97, 0\l  %102 = extractvalue \{ double, double \} %97, 1\l  %103 = extractvalue \{ double, double \} %100, 0\l  %104 = extractvalue \{ double, double \} %100, 1\l  %105 = call \{ double, double \} @__divdc3(double %101, double %102, double\l... %103, double %104)\l  %106 = call ptr @llvm.stacksave.p0()\l  %107 = alloca \{ double, double \}, i64 1, align 8\l  store \{ double, double \} %105, ptr %107, align 8\l  %108 = load \{ double, double \}, ptr %107, align 8\l  call void @llvm.stackrestore.p0(ptr %106)\l  store \{ double, double \} %108, ptr %3, align 8\l  %109 = load \{ double, double \}, ptr %5, align 8\l  %110 = load double, ptr %6, align 8\l  %111 = insertvalue \{ double, double \} undef, double %110, 0\l  %112 = insertvalue \{ double, double \} %111, double 0.000000e+00, 1\l  %113 = extractvalue \{ double, double \} %109, 0\l  %114 = extractvalue \{ double, double \} %109, 1\l  %115 = extractvalue \{ double, double \} %112, 0\l  %116 = extractvalue \{ double, double \} %112, 1\l  %117 = fmul contract double %113, %115\l  %118 = fmul contract double %114, %115\l  %119 = fmul contract double %113, %116\l  %120 = fadd contract double %119, %118\l  %121 = fmul contract double %114, %116\l  %122 = fsub contract double %117, %121\l  %123 = insertvalue \{ double, double \} undef, double %122, 0\l  %124 = insertvalue \{ double, double \} %123, double %120, 1\l  store \{ double, double \} %124, ptr %0, align 8\l  br label %125\l}"];
	Node0x55ee109ffce0 -> Node0x55ee10a00040[tooltip="16 -> 125\nProbability 100.00%" ];
	Node0x55ee10a00040 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{125:\l|  ret void\l}"];
}
