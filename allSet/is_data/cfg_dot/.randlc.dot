digraph "CFG for 'randlc' function" {
	label="CFG for 'randlc' function";

	Node0x55d6510034d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70" fontname="Courier",label="{entry:\l|  %X.addr = alloca ptr, align 8\l  %A.addr = alloca ptr, align 8\l  %T1 = alloca double, align 8\l  %T2 = alloca double, align 8\l  %T3 = alloca double, align 8\l  %T4 = alloca double, align 8\l  %A1 = alloca double, align 8\l  %A2 = alloca double, align 8\l  %X1 = alloca double, align 8\l  %X2 = alloca double, align 8\l  %Z = alloca double, align 8\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  store ptr %X, ptr %X.addr, align 8\l  store ptr %A, ptr %A.addr, align 8\l  %0 = load i32, ptr @randlc.KS, align 4\l  %cmp = icmp eq i32 %0, 0\l  br i1 %cmp, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x55d6510034d0:s0 -> Node0x55d6510041c0[tooltip="entry -> if.then\nProbability 37.50%" ];
	Node0x55d6510034d0:s1 -> Node0x55d651004230[tooltip="entry -> if.end\nProbability 62.50%" ];
	Node0x55d6510041c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{if.then:\l|  store double 1.000000e+00, ptr @randlc.R23, align 8\l  store double 1.000000e+00, ptr @randlc.R46, align 8\l  store double 1.000000e+00, ptr @randlc.T23, align 8\l  store double 1.000000e+00, ptr @randlc.T46, align 8\l  store i32 1, ptr %i, align 4\l  br label %for.cond\l}"];
	Node0x55d6510041c0 -> Node0x55d651004730[tooltip="if.then -> for.cond\nProbability 100.00%" ];
	Node0x55d651004730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.cond:\l|  %1 = load i32, ptr %i, align 4\l  %cmp1 = icmp sle i32 %1, 23\l  br i1 %cmp1, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55d651004730:s0 -> Node0x55d651004960[tooltip="for.cond -> for.body\nProbability 96.88%" ];
	Node0x55d651004730:s1 -> Node0x55d6510007f0[tooltip="for.cond -> for.end\nProbability 3.12%" ];
	Node0x55d651004960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.body:\l|  %2 = load double, ptr @randlc.R23, align 8\l  %mul = fmul double 5.000000e-01, %2\l  store double %mul, ptr @randlc.R23, align 8\l  %3 = load double, ptr @randlc.T23, align 8\l  %mul2 = fmul double 2.000000e+00, %3\l  store double %mul2, ptr @randlc.T23, align 8\l  br label %for.inc\l}"];
	Node0x55d651004960 -> Node0x55d651000d90[tooltip="for.body -> for.inc\nProbability 100.00%" ];
	Node0x55d651000d90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.inc:\l|  %4 = load i32, ptr %i, align 4\l  %inc = add nsw i32 %4, 1\l  store i32 %inc, ptr %i, align 4\l  br label %for.cond, !llvm.loop !6\l}"];
	Node0x55d651000d90 -> Node0x55d651004730[tooltip="for.inc -> for.cond\nProbability 100.00%" ];
	Node0x55d6510007f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{for.end:\l|  store i32 1, ptr %i, align 4\l  br label %for.cond3\l}"];
	Node0x55d6510007f0 -> Node0x55d6510069e0[tooltip="for.end -> for.cond3\nProbability 100.00%" ];
	Node0x55d6510069e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.cond3:\l|  %5 = load i32, ptr %i, align 4\l  %cmp4 = icmp sle i32 %5, 46\l  br i1 %cmp4, label %for.body5, label %for.end10\l|{<s0>T|<s1>F}}"];
	Node0x55d6510069e0:s0 -> Node0x55d651006c10[tooltip="for.cond3 -> for.body5\nProbability 96.88%" ];
	Node0x55d6510069e0:s1 -> Node0x55d651006c90[tooltip="for.cond3 -> for.end10\nProbability 3.12%" ];
	Node0x55d651006c10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.body5:\l|  %6 = load double, ptr @randlc.R46, align 8\l  %mul6 = fmul double 5.000000e-01, %6\l  store double %mul6, ptr @randlc.R46, align 8\l  %7 = load double, ptr @randlc.T46, align 8\l  %mul7 = fmul double 2.000000e+00, %7\l  store double %mul7, ptr @randlc.T46, align 8\l  br label %for.inc8\l}"];
	Node0x55d651006c10 -> Node0x55d651007160[tooltip="for.body5 -> for.inc8\nProbability 100.00%" ];
	Node0x55d651007160 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{for.inc8:\l|  %8 = load i32, ptr %i, align 4\l  %inc9 = add nsw i32 %8, 1\l  store i32 %inc9, ptr %i, align 4\l  br label %for.cond3, !llvm.loop !8\l}"];
	Node0x55d651007160 -> Node0x55d6510069e0[tooltip="for.inc8 -> for.cond3\nProbability 100.00%" ];
	Node0x55d651006c90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{for.end10:\l|  store i32 1, ptr @randlc.KS, align 4\l  br label %if.end\l}"];
	Node0x55d651006c90 -> Node0x55d651004230[tooltip="for.end10 -> if.end\nProbability 100.00%" ];
	Node0x55d651004230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70" fontname="Courier",label="{if.end:\l|  %9 = load double, ptr @randlc.R23, align 8\l  %10 = load ptr, ptr %A.addr, align 8\l  %11 = load double, ptr %10, align 8\l  %mul11 = fmul double %9, %11\l  store double %mul11, ptr %T1, align 8\l  %12 = load double, ptr %T1, align 8\l  %conv = fptosi double %12 to i32\l  store i32 %conv, ptr %j, align 4\l  %13 = load i32, ptr %j, align 4\l  %conv12 = sitofp i32 %13 to double\l  store double %conv12, ptr %A1, align 8\l  %14 = load ptr, ptr %A.addr, align 8\l  %15 = load double, ptr %14, align 8\l  %16 = load double, ptr @randlc.T23, align 8\l  %17 = load double, ptr %A1, align 8\l  %neg = fneg double %16\l  %18 = call double @llvm.fmuladd.f64(double %neg, double %17, double %15)\l  store double %18, ptr %A2, align 8\l  %19 = load double, ptr @randlc.R23, align 8\l  %20 = load ptr, ptr %X.addr, align 8\l  %21 = load double, ptr %20, align 8\l  %mul14 = fmul double %19, %21\l  store double %mul14, ptr %T1, align 8\l  %22 = load double, ptr %T1, align 8\l  %conv15 = fptosi double %22 to i32\l  store i32 %conv15, ptr %j, align 4\l  %23 = load i32, ptr %j, align 4\l  %conv16 = sitofp i32 %23 to double\l  store double %conv16, ptr %X1, align 8\l  %24 = load ptr, ptr %X.addr, align 8\l  %25 = load double, ptr %24, align 8\l  %26 = load double, ptr @randlc.T23, align 8\l  %27 = load double, ptr %X1, align 8\l  %neg18 = fneg double %26\l  %28 = call double @llvm.fmuladd.f64(double %neg18, double %27, double %25)\l  store double %28, ptr %X2, align 8\l  %29 = load double, ptr %A1, align 8\l  %30 = load double, ptr %X2, align 8\l  %31 = load double, ptr %A2, align 8\l  %32 = load double, ptr %X1, align 8\l  %mul20 = fmul double %31, %32\l  %33 = call double @llvm.fmuladd.f64(double %29, double %30, double %mul20)\l  store double %33, ptr %T1, align 8\l  %34 = load double, ptr @randlc.R23, align 8\l  %35 = load double, ptr %T1, align 8\l  %mul21 = fmul double %34, %35\l  %conv22 = fptosi double %mul21 to i32\l  store i32 %conv22, ptr %j, align 4\l  %36 = load i32, ptr %j, align 4\l  %conv23 = sitofp i32 %36 to double\l  store double %conv23, ptr %T2, align 8\l  %37 = load double, ptr %T1, align 8\l  %38 = load double, ptr @randlc.T23, align 8\l  %39 = load double, ptr %T2, align 8\l  %neg25 = fneg double %38\l  %40 = call double @llvm.fmuladd.f64(double %neg25, double %39, double %37)\l  store double %40, ptr %Z, align 8\l  %41 = load double, ptr @randlc.T23, align 8\l  %42 = load double, ptr %Z, align 8\l  %43 = load double, ptr %A2, align 8\l  %44 = load double, ptr %X2, align 8\l  %mul27 = fmul double %43, %44\l  %45 = call double @llvm.fmuladd.f64(double %41, double %42, double %mul27)\l  store double %45, ptr %T3, align 8\l  %46 = load double, ptr @randlc.R46, align 8\l  %47 = load double, ptr %T3, align 8\l  %mul28 = fmul double %46, %47\l  %conv29 = fptosi double %mul28 to i32\l  store i32 %conv29, ptr %j, align 4\l  %48 = load i32, ptr %j, align 4\l  %conv30 = sitofp i32 %48 to double\l  store double %conv30, ptr %T4, align 8\l  %49 = load double, ptr %T3, align 8\l  %50 = load double, ptr @randlc.T46, align 8\l  %51 = load double, ptr %T4, align 8\l  %neg32 = fneg double %50\l  %52 = call double @llvm.fmuladd.f64(double %neg32, double %51, double %49)\l  %53 = load ptr, ptr %X.addr, align 8\l  store double %52, ptr %53, align 8\l  %54 = load double, ptr @randlc.R46, align 8\l  %55 = load ptr, ptr %X.addr, align 8\l  %56 = load double, ptr %55, align 8\l  %mul33 = fmul double %54, %56\l  ret double %mul33\l}"];
}
