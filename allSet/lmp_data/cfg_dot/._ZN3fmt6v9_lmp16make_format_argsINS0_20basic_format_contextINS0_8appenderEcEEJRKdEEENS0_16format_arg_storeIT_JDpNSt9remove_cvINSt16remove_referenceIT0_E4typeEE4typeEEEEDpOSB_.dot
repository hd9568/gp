digraph "CFG for '_ZN3fmt6v9_lmp16make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJRKdEEENS0_16format_arg_storeIT_JDpNSt9remove_cvINSt16remove_referenceIT0_E4typeEE4typeEEEEDpOSB_' function" {
	label="CFG for '_ZN3fmt6v9_lmp16make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJRKdEEENS0_16format_arg_storeIT_JDpNSt9remove_cvINSt16remove_referenceIT0_E4typeEE4typeEEEEDpOSB_' function";

	Node0x5563be16c8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %this.addr.i3.i = alloca ptr, align 8\l  %val.addr.i4.i = alloca double, align 8\l  %this.addr.i.i3 = alloca ptr, align 8\l  %val.addr.i.i = alloca double, align 8\l  %retval.i4 = alloca %\"class.fmt::v9_lmp::detail::value\", align 16\l  %val.addr.i5 = alloca ptr, align 8\l  %arg.i = alloca ptr, align 8\l  %ref.tmp.i6 = alloca double, align 8\l  %ref.tmp1.i = alloca %\"struct.fmt::v9_lmp::detail::arg_mapper\", align 1\l  %formattable_char.i = alloca i8, align 1\l  %formattable_const.i = alloca i8, align 1\l  %formattable_pointer.i = alloca i8, align 1\l  %formattable.i = alloca i8, align 1\l  %retval.i = alloca %\"class.fmt::v9_lmp::detail::value\", align 16\l  %val.addr.i = alloca ptr, align 8\l  %this.addr.i5.i = alloca ptr, align 8\l  %.addr.i.i = alloca ptr, align 8\l  %.addr1.i.i = alloca i32, align 4\l  %.addr2.i.i = alloca i32, align 4\l  %.addr3.i.i = alloca ptr, align 8\l  %this.addr.i.i = alloca ptr, align 8\l  %init.addr.i.i = alloca ptr, align 8\l  %this.addr.i = alloca ptr, align 8\l  %args.addr.i = alloca ptr, align 8\l  %ref.tmp.i = alloca %\"class.fmt::v9_lmp::detail::value\", align 16\l  %retval = alloca %\"class.fmt::v9_lmp::format_arg_store.63\", align 16\l  %args.addr = alloca ptr, align 8\l  store ptr %args, ptr %args.addr, align 8\l  %0 = load ptr, ptr %args.addr, align 8\l  store ptr %retval, ptr %this.addr.i, align 8\l  store ptr %0, ptr %args.addr.i, align 8\l  %this1.i = load ptr, ptr %this.addr.i, align 8\l  %1 = load ptr, ptr %args.addr.i, align 8\l  store ptr %1, ptr %val.addr.i, align 8\l  %2 = load ptr, ptr %val.addr.i, align 8\l  store ptr %2, ptr %val.addr.i5, align 8\l  %3 = load ptr, ptr %val.addr.i5, align 8\l  %4 = load double, ptr %3, align 8\l  store ptr %ref.tmp1.i, ptr %this.addr.i.i3, align 8\l  store double %4, ptr %val.addr.i.i, align 8\l  %this1.i.i7 = load ptr, ptr %this.addr.i.i3, align 8\l  %5 = load double, ptr %val.addr.i.i, align 8\l  store double %5, ptr %ref.tmp.i6, align 8\l  store ptr %ref.tmp.i6, ptr %arg.i, align 8\l  store i8 1, ptr %formattable_char.i, align 1\l  store i8 1, ptr %formattable_const.i, align 1\l  store i8 1, ptr %formattable_pointer.i, align 1\l  store i8 1, ptr %formattable.i, align 1\l  %6 = load ptr, ptr %arg.i, align 8\l  %7 = load double, ptr %6, align 8\l  store ptr %retval.i4, ptr %this.addr.i3.i, align 8\l  store double %7, ptr %val.addr.i4.i, align 8\l  %this1.i5.i = load ptr, ptr %this.addr.i3.i, align 8\l  %8 = load double, ptr %val.addr.i4.i, align 8\l  store double %8, ptr %this1.i5.i, align 16\l  %9 = load \{ i64, i64 \}, ptr %retval.i4, align 16\l  %10 = extractvalue \{ i64, i64 \} %9, 0\l  store i64 %10, ptr %retval.i, align 16\l  %11 = getelementptr inbounds \{ i64, i64 \}, ptr %retval.i, i32 0, i32 1\l  %12 = extractvalue \{ i64, i64 \} %9, 1\l  store i64 %12, ptr %11, align 8\l  %13 = load \{ i64, i64 \}, ptr %retval.i, align 16\l  %14 = extractvalue \{ i64, i64 \} %13, 0\l  store i64 %14, ptr %ref.tmp.i, align 16\l  %15 = getelementptr inbounds \{ i64, i64 \}, ptr %ref.tmp.i, i32 0, i32 1\l  %16 = extractvalue \{ i64, i64 \} %13, 1\l  store i64 %16, ptr %15, align 8\l  store ptr %this1.i, ptr %this.addr.i.i, align 8\l  store ptr %ref.tmp.i, ptr %init.addr.i.i, align 8\l  %this1.i.i = load ptr, ptr %this.addr.i.i, align 8\l  %17 = load ptr, ptr %init.addr.i.i, align 8\l  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %this1.i.i, ptr align 16 %17,\l... i64 16, i1 false)\l  store ptr %this1.i, ptr %this.addr.i5.i, align 8\l  %this1.i6.i = load ptr, ptr %this.addr.i5.i, align 8\l  %18 = load ptr, ptr %args.addr.i, align 8\l  store ptr null, ptr %.addr.i.i, align 8\l  store i32 0, ptr %.addr1.i.i, align 4\l  store i32 0, ptr %.addr2.i.i, align 4\l  store ptr %18, ptr %.addr3.i.i, align 8\l  %coerce.dive = getelementptr inbounds\l... %\"class.fmt::v9_lmp::format_arg_store.63\", ptr %retval, i32 0, i32 0\l  %coerce.dive1 = getelementptr inbounds\l... %\"struct.fmt::v9_lmp::detail::arg_data.64\", ptr %coerce.dive, i32 0, i32 0\l  %19 = load \{ i64, i64 \}, ptr %coerce.dive1, align 16\l  ret \{ i64, i64 \} %19\l}"];
}
