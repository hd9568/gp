digraph "CFG for '_ZN9LAMMPS_NS9PairTable6splintEPdS1_S1_id' function" {
	label="CFG for '_ZN9LAMMPS_NS9PairTable6splintEPdS1_S1_id' function";

	Node0x55f58a3bd510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{entry:\l|  %xa.addr = alloca ptr, align 8\l  %ya.addr = alloca ptr, align 8\l  %y2a.addr = alloca ptr, align 8\l  %n.addr = alloca i32, align 4\l  %x.addr = alloca double, align 8\l  %klo = alloca i32, align 4\l  %khi = alloca i32, align 4\l  %k = alloca i32, align 4\l  %h = alloca double, align 8\l  %b = alloca double, align 8\l  %a = alloca double, align 8\l  %y = alloca double, align 8\l  store ptr %xa, ptr %xa.addr, align 8\l  store ptr %ya, ptr %ya.addr, align 8\l  store ptr %y2a, ptr %y2a.addr, align 8\l  store i32 %n, ptr %n.addr, align 4\l  store double %x, ptr %x.addr, align 8\l  store i32 0, ptr %klo, align 4\l  %0 = load i32, ptr %n.addr, align 4\l  %sub = sub nsw i32 %0, 1\l  store i32 %sub, ptr %khi, align 4\l  br label %while.cond\l}"];
	Node0x55f58a3bd510 -> Node0x55f58a3be630[tooltip="entry -> while.cond\nProbability 100.00%" ];
	Node0x55f58a3be630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{while.cond:\l|  %1 = load i32, ptr %khi, align 4\l  %2 = load i32, ptr %klo, align 4\l  %sub1 = sub nsw i32 %1, %2\l  %cmp = icmp sgt i32 %sub1, 1\l  br i1 %cmp, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x55f58a3be630:s0 -> Node0x55f58a3be980[tooltip="while.cond -> while.body\nProbability 96.88%" ];
	Node0x55f58a3be630:s1 -> Node0x55f58a3bea00[tooltip="while.cond -> while.end\nProbability 3.12%" ];
	Node0x55f58a3be980 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{while.body:\l|  %3 = load i32, ptr %khi, align 4\l  %4 = load i32, ptr %klo, align 4\l  %add = add nsw i32 %3, %4\l  %shr = ashr i32 %add, 1\l  store i32 %shr, ptr %k, align 4\l  %5 = load ptr, ptr %xa.addr, align 8\l  %6 = load i32, ptr %k, align 4\l  %idxprom = sext i32 %6 to i64\l  %arrayidx = getelementptr inbounds double, ptr %5, i64 %idxprom\l  %7 = load double, ptr %arrayidx, align 8\l  %8 = load double, ptr %x.addr, align 8\l  %cmp2 = fcmp ogt double %7, %8\l  br i1 %cmp2, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x55f58a3be980:s0 -> Node0x55f58a3bdd30[tooltip="while.body -> if.then\nProbability 50.00%" ];
	Node0x55f58a3be980:s1 -> Node0x55f58a3bf430[tooltip="while.body -> if.else\nProbability 50.00%" ];
	Node0x55f58a3bdd30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{if.then:\l|  %9 = load i32, ptr %k, align 4\l  store i32 %9, ptr %khi, align 4\l  br label %if.end\l}"];
	Node0x55f58a3bdd30 -> Node0x55f58a3bf670[tooltip="if.then -> if.end\nProbability 100.00%" ];
	Node0x55f58a3bf430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{if.else:\l|  %10 = load i32, ptr %k, align 4\l  store i32 %10, ptr %klo, align 4\l  br label %if.end\l}"];
	Node0x55f58a3bf430 -> Node0x55f58a3bf670[tooltip="if.else -> if.end\nProbability 100.00%" ];
	Node0x55f58a3bf670 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{if.end:\l|  br label %while.cond, !llvm.loop !6\l}"];
	Node0x55f58a3bf670 -> Node0x55f58a3be630[tooltip="if.end -> while.cond\nProbability 100.00%" ];
	Node0x55f58a3bea00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{while.end:\l|  %11 = load ptr, ptr %xa.addr, align 8\l  %12 = load i32, ptr %khi, align 4\l  %idxprom3 = sext i32 %12 to i64\l  %arrayidx4 = getelementptr inbounds double, ptr %11, i64 %idxprom3\l  %13 = load double, ptr %arrayidx4, align 8\l  %14 = load ptr, ptr %xa.addr, align 8\l  %15 = load i32, ptr %klo, align 4\l  %idxprom5 = sext i32 %15 to i64\l  %arrayidx6 = getelementptr inbounds double, ptr %14, i64 %idxprom5\l  %16 = load double, ptr %arrayidx6, align 8\l  %sub7 = fsub double %13, %16\l  store double %sub7, ptr %h, align 8\l  %17 = load ptr, ptr %xa.addr, align 8\l  %18 = load i32, ptr %khi, align 4\l  %idxprom8 = sext i32 %18 to i64\l  %arrayidx9 = getelementptr inbounds double, ptr %17, i64 %idxprom8\l  %19 = load double, ptr %arrayidx9, align 8\l  %20 = load double, ptr %x.addr, align 8\l  %sub10 = fsub double %19, %20\l  %21 = load double, ptr %h, align 8\l  %div = fdiv double %sub10, %21\l  store double %div, ptr %a, align 8\l  %22 = load double, ptr %x.addr, align 8\l  %23 = load ptr, ptr %xa.addr, align 8\l  %24 = load i32, ptr %klo, align 4\l  %idxprom11 = sext i32 %24 to i64\l  %arrayidx12 = getelementptr inbounds double, ptr %23, i64 %idxprom11\l  %25 = load double, ptr %arrayidx12, align 8\l  %sub13 = fsub double %22, %25\l  %26 = load double, ptr %h, align 8\l  %div14 = fdiv double %sub13, %26\l  store double %div14, ptr %b, align 8\l  %27 = load double, ptr %a, align 8\l  %28 = load ptr, ptr %ya.addr, align 8\l  %29 = load i32, ptr %klo, align 4\l  %idxprom15 = sext i32 %29 to i64\l  %arrayidx16 = getelementptr inbounds double, ptr %28, i64 %idxprom15\l  %30 = load double, ptr %arrayidx16, align 8\l  %31 = load double, ptr %b, align 8\l  %32 = load ptr, ptr %ya.addr, align 8\l  %33 = load i32, ptr %khi, align 4\l  %idxprom17 = sext i32 %33 to i64\l  %arrayidx18 = getelementptr inbounds double, ptr %32, i64 %idxprom17\l  %34 = load double, ptr %arrayidx18, align 8\l  %mul19 = fmul double %31, %34\l  %35 = call double @llvm.fmuladd.f64(double %27, double %30, double %mul19)\l  %36 = load double, ptr %a, align 8\l  %37 = load double, ptr %a, align 8\l  %mul = fmul double %36, %37\l  %38 = load double, ptr %a, align 8\l  %39 = load double, ptr %a, align 8\l  %neg = fneg double %39\l  %40 = call double @llvm.fmuladd.f64(double %mul, double %38, double %neg)\l  %41 = load ptr, ptr %y2a.addr, align 8\l  %42 = load i32, ptr %klo, align 4\l  %idxprom21 = sext i32 %42 to i64\l  %arrayidx22 = getelementptr inbounds double, ptr %41, i64 %idxprom21\l  %43 = load double, ptr %arrayidx22, align 8\l  %44 = load double, ptr %b, align 8\l  %45 = load double, ptr %b, align 8\l  %mul24 = fmul double %44, %45\l  %46 = load double, ptr %b, align 8\l  %47 = load double, ptr %b, align 8\l  %neg26 = fneg double %47\l  %48 = call double @llvm.fmuladd.f64(double %mul24, double %46, double %neg26)\l  %49 = load ptr, ptr %y2a.addr, align 8\l  %50 = load i32, ptr %khi, align 4\l  %idxprom27 = sext i32 %50 to i64\l  %arrayidx28 = getelementptr inbounds double, ptr %49, i64 %idxprom27\l  %51 = load double, ptr %arrayidx28, align 8\l  %mul29 = fmul double %48, %51\l  %52 = call double @llvm.fmuladd.f64(double %40, double %43, double %mul29)\l  %53 = load double, ptr %h, align 8\l  %54 = load double, ptr %h, align 8\l  %mul30 = fmul double %53, %54\l  %mul31 = fmul double %52, %mul30\l  %div32 = fdiv double %mul31, 6.000000e+00\l  %add33 = fadd double %35, %div32\l  store double %add33, ptr %y, align 8\l  %55 = load double, ptr %y, align 8\l  ret double %55\l}"];
}
