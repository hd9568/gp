digraph "CFG for '_ZN9MathExtra17richardson_sphereEPdS0_d' function" {
	label="CFG for '_ZN9MathExtra17richardson_sphereEPdS0_d' function";

	Node0x5583735c8530 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{entry:\l|  %q.addr = alloca ptr, align 8\l  %w.addr = alloca ptr, align 8\l  %dtq.addr = alloca double, align 8\l  %wq = alloca [4 x double], align 16\l  %qfull = alloca [4 x double], align 16\l  %qhalf = alloca [4 x double], align 16\l  store ptr %q, ptr %q.addr, align 8\l  store ptr %w, ptr %w.addr, align 8\l  store double %dtq, ptr %dtq.addr, align 8\l  %0 = load ptr, ptr %w.addr, align 8\l  %1 = load ptr, ptr %q.addr, align 8\l  %arraydecay = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 0\l  call void @_ZN9MathExtra7vecquatEPdS0_S0_(ptr noundef %0, ptr noundef %1,\l... ptr noundef %arraydecay)\l  %2 = load ptr, ptr %q.addr, align 8\l  %arrayidx = getelementptr inbounds double, ptr %2, i64 0\l  %3 = load double, ptr %arrayidx, align 8\l  %4 = load double, ptr %dtq.addr, align 8\l  %arrayidx1 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 0\l  %5 = load double, ptr %arrayidx1, align 16\l  %6 = call double @llvm.fmuladd.f64(double %4, double %5, double %3)\l  %arrayidx2 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 0\l  store double %6, ptr %arrayidx2, align 16\l  %7 = load ptr, ptr %q.addr, align 8\l  %arrayidx3 = getelementptr inbounds double, ptr %7, i64 1\l  %8 = load double, ptr %arrayidx3, align 8\l  %9 = load double, ptr %dtq.addr, align 8\l  %arrayidx4 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 1\l  %10 = load double, ptr %arrayidx4, align 8\l  %11 = call double @llvm.fmuladd.f64(double %9, double %10, double %8)\l  %arrayidx5 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 1\l  store double %11, ptr %arrayidx5, align 8\l  %12 = load ptr, ptr %q.addr, align 8\l  %arrayidx6 = getelementptr inbounds double, ptr %12, i64 2\l  %13 = load double, ptr %arrayidx6, align 8\l  %14 = load double, ptr %dtq.addr, align 8\l  %arrayidx7 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 2\l  %15 = load double, ptr %arrayidx7, align 16\l  %16 = call double @llvm.fmuladd.f64(double %14, double %15, double %13)\l  %arrayidx8 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 2\l  store double %16, ptr %arrayidx8, align 16\l  %17 = load ptr, ptr %q.addr, align 8\l  %arrayidx9 = getelementptr inbounds double, ptr %17, i64 3\l  %18 = load double, ptr %arrayidx9, align 8\l  %19 = load double, ptr %dtq.addr, align 8\l  %arrayidx10 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 3\l  %20 = load double, ptr %arrayidx10, align 8\l  %21 = call double @llvm.fmuladd.f64(double %19, double %20, double %18)\l  %arrayidx11 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 3\l  store double %21, ptr %arrayidx11, align 8\l  %arraydecay12 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 0\l  call void @_ZN9MathExtra10qnormalizeEPd(ptr noundef %arraydecay12)\l  %22 = load ptr, ptr %q.addr, align 8\l  %arrayidx13 = getelementptr inbounds double, ptr %22, i64 0\l  %23 = load double, ptr %arrayidx13, align 8\l  %24 = load double, ptr %dtq.addr, align 8\l  %mul = fmul double 5.000000e-01, %24\l  %arrayidx14 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 0\l  %25 = load double, ptr %arrayidx14, align 16\l  %26 = call double @llvm.fmuladd.f64(double %mul, double %25, double %23)\l  %arrayidx16 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  store double %26, ptr %arrayidx16, align 16\l  %27 = load ptr, ptr %q.addr, align 8\l  %arrayidx17 = getelementptr inbounds double, ptr %27, i64 1\l  %28 = load double, ptr %arrayidx17, align 8\l  %29 = load double, ptr %dtq.addr, align 8\l  %mul18 = fmul double 5.000000e-01, %29\l  %arrayidx19 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 1\l  %30 = load double, ptr %arrayidx19, align 8\l  %31 = call double @llvm.fmuladd.f64(double %mul18, double %30, double %28)\l  %arrayidx21 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 1\l  store double %31, ptr %arrayidx21, align 8\l  %32 = load ptr, ptr %q.addr, align 8\l  %arrayidx22 = getelementptr inbounds double, ptr %32, i64 2\l  %33 = load double, ptr %arrayidx22, align 8\l  %34 = load double, ptr %dtq.addr, align 8\l  %mul23 = fmul double 5.000000e-01, %34\l  %arrayidx24 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 2\l  %35 = load double, ptr %arrayidx24, align 16\l  %36 = call double @llvm.fmuladd.f64(double %mul23, double %35, double %33)\l  %arrayidx26 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 2\l  store double %36, ptr %arrayidx26, align 16\l  %37 = load ptr, ptr %q.addr, align 8\l  %arrayidx27 = getelementptr inbounds double, ptr %37, i64 3\l  %38 = load double, ptr %arrayidx27, align 8\l  %39 = load double, ptr %dtq.addr, align 8\l  %mul28 = fmul double 5.000000e-01, %39\l  %arrayidx29 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 3\l  %40 = load double, ptr %arrayidx29, align 8\l  %41 = call double @llvm.fmuladd.f64(double %mul28, double %40, double %38)\l  %arrayidx31 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 3\l  store double %41, ptr %arrayidx31, align 8\l  %arraydecay32 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  call void @_ZN9MathExtra10qnormalizeEPd(ptr noundef %arraydecay32)\l  %42 = load ptr, ptr %w.addr, align 8\l  %arraydecay33 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  %arraydecay34 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 0\l  call void @_ZN9MathExtra7vecquatEPdS0_S0_(ptr noundef %42, ptr noundef\l... %arraydecay33, ptr noundef %arraydecay34)\l  %43 = load double, ptr %dtq.addr, align 8\l  %mul35 = fmul double 5.000000e-01, %43\l  %arrayidx36 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 0\l  %44 = load double, ptr %arrayidx36, align 16\l  %arrayidx38 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  %45 = load double, ptr %arrayidx38, align 16\l  %46 = call double @llvm.fmuladd.f64(double %mul35, double %44, double %45)\l  store double %46, ptr %arrayidx38, align 16\l  %47 = load double, ptr %dtq.addr, align 8\l  %mul39 = fmul double 5.000000e-01, %47\l  %arrayidx40 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 1\l  %48 = load double, ptr %arrayidx40, align 8\l  %arrayidx42 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 1\l  %49 = load double, ptr %arrayidx42, align 8\l  %50 = call double @llvm.fmuladd.f64(double %mul39, double %48, double %49)\l  store double %50, ptr %arrayidx42, align 8\l  %51 = load double, ptr %dtq.addr, align 8\l  %mul43 = fmul double 5.000000e-01, %51\l  %arrayidx44 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 2\l  %52 = load double, ptr %arrayidx44, align 16\l  %arrayidx46 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 2\l  %53 = load double, ptr %arrayidx46, align 16\l  %54 = call double @llvm.fmuladd.f64(double %mul43, double %52, double %53)\l  store double %54, ptr %arrayidx46, align 16\l  %55 = load double, ptr %dtq.addr, align 8\l  %mul47 = fmul double 5.000000e-01, %55\l  %arrayidx48 = getelementptr inbounds [4 x double], ptr %wq, i64 0, i64 3\l  %56 = load double, ptr %arrayidx48, align 8\l  %arrayidx50 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 3\l  %57 = load double, ptr %arrayidx50, align 8\l  %58 = call double @llvm.fmuladd.f64(double %mul47, double %56, double %57)\l  store double %58, ptr %arrayidx50, align 8\l  %arraydecay51 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  call void @_ZN9MathExtra10qnormalizeEPd(ptr noundef %arraydecay51)\l  %arrayidx52 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 0\l  %59 = load double, ptr %arrayidx52, align 16\l  %arrayidx54 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 0\l  %60 = load double, ptr %arrayidx54, align 16\l  %neg = fneg double %60\l  %61 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %59, double\l... %neg)\l  %62 = load ptr, ptr %q.addr, align 8\l  %arrayidx55 = getelementptr inbounds double, ptr %62, i64 0\l  store double %61, ptr %arrayidx55, align 8\l  %arrayidx56 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 1\l  %63 = load double, ptr %arrayidx56, align 8\l  %arrayidx58 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 1\l  %64 = load double, ptr %arrayidx58, align 8\l  %neg59 = fneg double %64\l  %65 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %63, double\l... %neg59)\l  %66 = load ptr, ptr %q.addr, align 8\l  %arrayidx60 = getelementptr inbounds double, ptr %66, i64 1\l  store double %65, ptr %arrayidx60, align 8\l  %arrayidx61 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 2\l  %67 = load double, ptr %arrayidx61, align 16\l  %arrayidx63 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 2\l  %68 = load double, ptr %arrayidx63, align 16\l  %neg64 = fneg double %68\l  %69 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %67, double\l... %neg64)\l  %70 = load ptr, ptr %q.addr, align 8\l  %arrayidx65 = getelementptr inbounds double, ptr %70, i64 2\l  store double %69, ptr %arrayidx65, align 8\l  %arrayidx66 = getelementptr inbounds [4 x double], ptr %qhalf, i64 0, i64 3\l  %71 = load double, ptr %arrayidx66, align 8\l  %arrayidx68 = getelementptr inbounds [4 x double], ptr %qfull, i64 0, i64 3\l  %72 = load double, ptr %arrayidx68, align 8\l  %neg69 = fneg double %72\l  %73 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %71, double\l... %neg69)\l  %74 = load ptr, ptr %q.addr, align 8\l  %arrayidx70 = getelementptr inbounds double, ptr %74, i64 3\l  store double %73, ptr %arrayidx70, align 8\l  %75 = load ptr, ptr %q.addr, align 8\l  call void @_ZN9MathExtra10qnormalizeEPd(ptr noundef %75)\l  ret void\l}"];
}
